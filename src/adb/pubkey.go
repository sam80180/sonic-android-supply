package adb

/*
#cgo CFLAGS: -I/usr/local/opt/openssl/include
#cgo LDFLAGS: -L/usr/include/openssl -Lmy/library/src -lcrypto
#include "my_rsa_funcs.h"
*/
import "C"

import (
	"crypto/rsa"
	"crypto/x509"
	"encoding/binary"
	"encoding/pem"
	"fmt"
	"math/big"
	"unsafe"

	"github.com/0xc0d/encoding/bytebuffer"
)

var ANDROID_PUBKEY_MODULUS_SIZE int = 2048 / 8
var ANDROID_PUBKEY_ENCODED_SIZE int = 3*4 + 2*ANDROID_PUBKEY_MODULUS_SIZE
var ANDROID_PUBKEY_MODULUS_SIZE_WORDS int = ANDROID_PUBKEY_MODULUS_SIZE / 4
var RSA_SHA_PKCS1_SIGNATURE_PADDING []byte = []byte{
	0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00,
	0x30, 0x21, 0x30, 0x09, 0x06, 0x05, 0x2b, 0x0e, 0x03, 0x02, 0x1a, 0x05, 0x00,
	0x04, 0x14,
}

func swapEndianness(bytes []byte) []byte {
	len := len(bytes)
	out := make([]byte, len)
	for i, _ := range bytes {
		out[i] = bytes[len-i-1]
	} // end for
	return out
} // end swapEndianness()

func AdbPubKeyDecode(androidPubkey []byte) (*rsa.PublicKey, error) {
	key_size := len(androidPubkey)
	if key_size < ANDROID_PUBKEY_ENCODED_SIZE {
		return nil, fmt.Errorf("invalid key length")
	} // end if
	keyStruct := bytebuffer.NewWrappedBuffer(androidPubkey, key_size)
	keyStruct.SetOrder(binary.LittleEndian)
	modulusSize, _ := keyStruct.GetAsInt32()
	if int(modulusSize) != ANDROID_PUBKEY_MODULUS_SIZE_WORDS {
		return nil, fmt.Errorf("invalid modulus length")
	} // end if
	modulus := make([]byte, ANDROID_PUBKEY_MODULUS_SIZE)
	keyStruct.SetPosition(8)
	keyStruct.GetBytes(modulus, 0, ANDROID_PUBKEY_MODULUS_SIZE)
	n := new(big.Int)
	n.SetBytes(swapEndianness(modulus))
	keyStruct.SetPosition(520)
	e, _ := keyStruct.GetAsInt32()
	return &rsa.PublicKey{N: n, E: int(e)}, nil
} // end AdbPubKeyDecode()
/*
	func RSA_public_decrypt(pubKey *rsa.PublicKey, data []byte) []byte {
		// https://stackoverflow.com/a/44853488/12857692
		c := new(big.Int)
		m := new(big.Int)
		m.SetBytes(data)
		e := big.NewInt(int64(pubKey.E))
		c.Exp(m, e, pubKey.N)
		out := c.Bytes()
		skip := 0
		for i := 2; i < len(out); i++ {
			if i+1 >= len(out) {
				break
			}
			if out[i] == 0xff && out[i+1] == 0 {
				skip = i + 2
				break
			}
		}
		return out[skip:]
	}
*/
func publicKeyToPEM(pubkey *rsa.PublicKey) ([]byte, error) {
	derBytes, _ := x509.MarshalPKIXPublicKey(pubkey)
	pemBlock := &pem.Block{
		Type:  "PUBLIC KEY",
		Bytes: derBytes,
	}
	pemBytes := pem.EncodeToMemory(pemBlock)
	return pemBytes, nil
} // end publicKeyToPEM()

func PubKeyValidate(publicKey *rsa.PublicKey, digest, signature []byte) (bool, error) {
	pem, _ := publicKeyToPEM(publicKey)
	nVerify := C.rsa_public_verify((*C.uchar)(unsafe.Pointer(&digest[0])), (*C.uchar)(unsafe.Pointer(&signature[0])), (*C.uchar)(unsafe.Pointer(&pem[0])))
	if nVerify != 0 {
		return false, fmt.Errorf("%s", C.GoString(&C.last_error_string[0]))
	} // end if
	return true, nil
} // end PubKeyValidate()

/*
References:
https://github.com/MuntashirAkon/libadb-android/blob/master/libadb/src/main/java/io/github/muntashirakon/adb/AndroidPubkey.java
*/
